import mongoose from 'mongoose';
import Appointment from '../models/Appointment.js';
import Utilisateur from '../models/UserModel.js';
import connectDB from '../config/db.js';

// Script pour tester la cr√©ation de rendez-vous
const testAppointmentCreation = async () => {
  try {
    console.log('üîÑ Connexion √† la base de donn√©es...');
    await connectDB();

    // Chercher ou cr√©er un utilisateur de test
    let testUser = await Utilisateur.findOne({ email: 'patient@test.com' });
    
    if (!testUser) {
      console.log('üë§ Cr√©ation d\'un utilisateur patient de test...');
      testUser = new Utilisateur({
        firstName: 'Patient',
        lastName: 'Test',
        phone: '+33123456789',
        email: 'patient@test.com',
        password: 'hashedpassword123',
        role: 'utilisateur'
      });
      await testUser.save();
      console.log('‚úÖ Utilisateur cr√©√©:', testUser._id);
    } else {
      console.log('üë§ Utilisateur trouv√©:', testUser._id);
    }

    // Cr√©er un rendez-vous de test
    const testAppointment = {
      userId: testUser._id,
      fullName: 'Patient Test',
      email: 'patient@test.com',
      phone: '+33123456789',
      age: 30,
      gender: 'Homme',
      service: 'consultation',
      date: new Date('2025-09-15'),
      time: '14:30',
      doctorName: 'Dr. Sophie Martin',
      notes: 'Test de cr√©ation de rendez-vous depuis le formulaire',
      status: 'en attente',
      createdAt: new Date()
    };

    console.log('üìã Cr√©ation du rendez-vous de test...');
    const appointment = new Appointment(testAppointment);
    const savedAppointment = await appointment.save();
    
    console.log('‚úÖ Rendez-vous cr√©√© avec succ√®s !');
    console.log('üìä D√©tails du rendez-vous:');
    console.log('   ID:', savedAppointment._id);
    console.log('   Patient:', savedAppointment.fullName);
    console.log('   Service:', savedAppointment.service);
    console.log('   Date:', savedAppointment.date.toLocaleDateString());
    console.log('   Heure:', savedAppointment.time);
    console.log('   M√©decin:', savedAppointment.doctorName);
    console.log('   Statut:', savedAppointment.status);

    // V√©rifier que le rendez-vous est bien r√©cup√©rable c√¥t√© admin
    console.log('\nüîç V√©rification c√¥t√© admin...');
    const allAppointments = await Appointment.find().sort({ date: -1, time: -1 });
    console.log(`üìÖ Total des rendez-vous dans la base: ${allAppointments.length}`);
    
    const recentAppointments = allAppointments.slice(0, 3);
    console.log('üìã 3 derniers rendez-vous:');
    recentAppointments.forEach((appt, index) => {
      console.log(`   ${index + 1}. ${appt.fullName} - ${appt.service} - ${appt.date.toLocaleDateString()} √† ${appt.time} (${appt.status})`);
    });

    mongoose.connection.close();
    console.log('\nüîê Connexion ferm√©e.');
    console.log('‚úÖ Test termin√© avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    process.exit(1);
  }
};

// Ex√©cuter le script
testAppointmentCreation();